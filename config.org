#+title: Emacs

** 일반적인 설정
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq auto-save-default nil)
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
  (setq custom-file (make-temp-file "emacs-custom"))
  (setq default-directory (concat (getenv "HOME") "/"))
  (setq dired-listing-switches "-alh")
  (setq warning-minimum-level :emergency)
#+END_SRC


** 화면및시각효과
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq ring-bell-function 'ignore)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode 1)
  (setq-default truncate-lines t)
  (setq-default cursor-type 'box)
#+END_SRC

** 초기 프레임사이즈
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((width . 120) (height . 50)))
  (when window-system
    (set-frame-size (selected-frame) 120 50))
#+END_SRC

** 폰트
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil  :font  (if (eq system-type 'darwin) "Andale Mono 13" "DejaVu Sans Mono 9"))
  (unless (eq system-type 'darwin)
    (set-fontset-font  "fontset-default" 'korean-ksc5601 "NanumGothic-*"))
#+END_SRC


** 아이콘
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)

  (use-package all-the-icons-dired
    :ensure t
    :config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package all-the-icons-ibuffer
    :ensure t
    :config (all-the-icons-ibuffer-mode 1))
#+END_SRC

** 라인/fringe(라인 가장자리)
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (global-linum-mode 1)
  (setq linum-format "%5d ")
  (show-paren-mode 1)  
  (custom-set-faces
   '(fringe-mode 1 nil (fringe))
   (unless (eq system-type 'darwin)
     '(linum ((t (:height 80))))
     )
   )
#+END_SRC

** 탭
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil) ;;Tab사용안함
#+END_SRC



** Electric pair mode
Electric Pair mode, a global minor mode, provides a way to easily insert matching delimiters:
parentheses, braces, brackets, etc. 
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              (?\' . ?\')
                              ))

  (electric-pair-mode t)
#+END_SRC

** Yes-or-No
yes-or-no로 물어보는것을 y-or-n로 바꾸기 
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Global Key
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-t") '(lambda () (interactive)))
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "S-SPC") 'ignore)
#+END_SRC


** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 7)
                            (bookmarks . 5)
                            (projects . 5))
          dashboard-startup-banner "~/.emacs.d/dongha.png"))
#+END_SRC


** 둠 테마
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if window-system
    :ensure t
    :disabled
    :config
    (load-theme 'doom-molokai t)
    (doom-themes-org-config)
    (doom-themes-visual-bell-config))
#+END_SRC

** 스페이스맥스 테마
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :if window-system
    :ensure t
    :defer t
    :init
    (load-theme 'spacemacs-dark t))
#+END_SRC

** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 20)
    (setq doom-modeline-bar-width 4)
    (setq doom-modeline-modal-icon t))
#+END_SRC

** async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :config (dired-async-mode 1))
#+END_SRC


** 쉘
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC



** winum
#+BEGIN_SRC emacs-lisp
  (use-package winum
    :ensure t
    :config
    (winum-mode))
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC

** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :config (add-hook 'prog-mode-hook 'rainbow-mode))

  (use-package rainbow-delimiters
    :ensure t
    :config
    (rainbow-delimiters-mode 1))
#+END_SRC

** exapnd-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind (("C-=" . er/expand-region)
	         ("C--" . er/contract-region)))  
#+END_SRC

** popup-kill-ring
browsing supports C-n and C-p
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** kill-ring
default is 60
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC


** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yml\\'")
#+END_SRC


** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :diminish paredit-mode
    :config
    (use-package paredit-everywhere :ensure t)
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           'enable-paredit-mode))
#+END_SRC


** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("C-x g" . magit-status))
#+END_SRC

** Git Gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (use-package git-gutter-fringe :ensure t)
    (setq-default left-fringe-width  20)
    (setq-default right-fringe-width 20)
    (set-face-foreground 'git-gutter-fr:modified "yellow")
    (set-face-foreground 'git-gutter-fr:added    "blue")
    (set-face-foreground 'git-gutter-fr:deleted  "white")
    (setq git-gutter:window-width 2)
    (setq git-gutter:unchanged-sign " ")
    (global-git-gutter-mode +1))
#+END_SRC


** Custom 함수

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

  (defun nolinum()
    (interactive)
    (message "Deactivated linum mode")
    (linum-mode 0))
#+END_SRC



** Company
#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 1
         company-idle-delay 0.0)
  (use-package company
    :ensure t
    :config (global-company-mode t))
#+END_SRC




** prettier-js
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :config
    (setq prettier-js-args '(
                             "--semi"
                             "--single-quote"
                             "--jsx-single-quote" "true"
                             "--bracket-spacing" "true"
                             "--bracket-same-line" "true"
                             "--jsx-bracket-same-line" "true"
                             "--arrow-parens" "avoid"
                             "--trailing-comma" "all")))
#+END_SRC

** js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode
    ("\\.js\\'"
     "\\.vue\\'")
    :config
    (setq-default js-indent-level 2
                  js2-strict-missing-semi-warning nil
                  js2-highlight-external-variables nil
                  js2-ignored-warnings '("msg.extra.trailing.comma"))
    (add-hook 'js2-mode-hook 'prettier-js-mode))
#+END_SRC

** typescript-mode
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode "\\.tsx?\\'"
    :config
    (add-hook 'typescript-mode-hook 'lsp)
    (add-hook 'typescript-mode-hook 'prettier-js-mode))
#+END_SRC

** web-mode
#+BEGIN_SRC emacs-lisp

 (setq web-mode-enable-auto-pairing t
          web-mode-enable-auto-closing t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight nil
          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-attr-indent-offset 2
          css-indent-offset 2)
          
(use-package web-mode
  :ensure t
  :mode (("\\.js\\'" . web-mode)
	      ("\\.jsx\\'" .  web-mode)
        ("\\.ts\\'" . web-mode)
        ("\\.tsx\\'" . web-mode)
        ("\\.html?\\'" . web-mode))
  :commands web-mode)
#+END_SRC

** emmet-mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :defer t
    :config
    (define-key emmet-mode-keymap (kbd "C-j") nil)
    (keyboard-translate ?\C-i ?\H-i)
    (define-key emmet-mode-keymap (kbd "H-i") 'emmet-expand-line)
    (setq
     emmet-self-closing-tag-style " /"
     emmet-preview-default 1
     emmet-indent-after-insert t
     emmet-indentation 2)
    :hook
    ((web-mode . emmet-mode)
     (sgml-mode . emmet-mode)
     (css-mode . emmet-mode)))
#+END_SRC

** jsx-mode
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :mode
    ("\\.jsx?\\'"))
#+END_SRC

** json-mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
    :ensure t)
#+END_SRC


** LSP
#+BEGIN_SRC emacs-lisp
(setq lsp-log-io nil) ;; Don't log everything = speed
(setq lsp-keymap-prefix "C-c l")
(setq lsp-restart 'auto-restart)
(setq lsp-ui-sideline-show-diagnostics t)
(setq lsp-ui-sideline-show-hover t)
(setq lsp-ui-sideline-show-code-actions t)

(use-package lsp-mode
  :ensure t
  :hook (
	 (web-mode . lsp-deferred)
	 (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp-deferred)


(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)
  
(use-package lsp-treemacs
  :ensure t)
#+END_SRC


** evil
#+BEGIN_SRC emacs-lisp
(use-package undo-fu
   :ensure t)
   
(use-package evil
   :ensure t
   :bind (("<escape>" . keyboard-escape-quit))
   :init
   (setq evil-want-keybinding nil)
   (setq evil-undo-system 'undo-fu)
   :config
   (evil-mode 1))
   
 (use-package evil-collection
    :ensure t
    :after evil
    :config
     (setq evil-want-integration t)
     (evil-collection init))
   
   
   
      
 (use-package vertico
    :ensure t
    :config
     (vertico-mode))
#+END_SRC
