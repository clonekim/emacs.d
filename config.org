#+STARTUP: overview
* Garbage Collection
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 10000000)

  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold 1000000)
              (message "gc-cons-threshold restored "
                       gc-cons-threshold)))
#+END_SRC


* Editor Perferences

** Basic Functionality
#+BEGIN_SRC emacs-lisp
  (setq warning-minimum-level :emergency)
  (setq inhibit-startup-screen t)
  (setq ring-bell-function 'ignore)
  (setq create-lockfiles nil)
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq custom-file (make-temp-file "emacs-custom"))
  (setq default-directory (concat (getenv "HOME") "/"))
  (setq dired-listing-switches "-alh")

  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode 1)
  (delete-selection-mode t)
  (setq-default truncate-lines t)
  (setq-default cursor-type 'box)
#+END_SRC

** Frame size
#+BEGIN_SRC emacs-lisp
  (setq default-frame-alist '((width . 120) (height . 50)))
  (when window-system
    (set-frame-size (selected-frame) 120 50))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute
   'default nil
   :font
   (if (eq system-type 'darwin)
       "Andale Mono 14"
     "DejaVu Sans Mono 9"))

  (unless (eq system-type 'darwin)
    (set-fontset-font "fontset-default" 'korean-ksc5601 "NanumGothic-*"))
#+END_SRC

** Line/Fringe
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
  (global-linum-mode 1)
  (setq linum-format "%6d ")
  (show-paren-mode 1)
  (fringe-mode 1)
  (custom-set-faces
   '(fringe-mode 1 nil (fringe))
   (unless (eq system-type 'darwin)
     '(linum ((t (:height 80))))
     )
   )
#+END_SRC

** Tab
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil) ;;Tab사용안함
#+END_SRC

** Subwords
Subword will remaps word-based editing commands to subword-based commands that 
handle symbols with mixed uppercase and lowercase letters.
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC

** Electric pair mode
Electric Pair mode, a global minor mode, provides a way to easily insert matching delimiters:
parentheses, braces, brackets, etc. 
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\{ . ?\})
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              (?\' . ?\')
                              ))

  (electric-pair-mode t)
#+END_SRC

** Yes-or-No
yes-or-no로 물어보는것을 y-or-n로 바꾸기 
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Global Key
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-t") '(lambda () (interactive)))
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key (kbd "S-SPC") 'ignore)
;;(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC


* Packages

** Doom Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :if window-system
    :ensure t
    :disabled
    :config
    (load-theme 'doom-molokai t)
    (doom-themes-org-config)
    (doom-themes-visual-bell-config))
#+END_SRC

** Spacemacs Theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :if window-system
    :ensure t
    :defer t
    :init
    (load-theme 'spacemacs-dark t))
#+END_SRC
** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-height 20)
    (setq doom-modeline-bar-width 4)
    (setq doom-modeline-modal-icon t))
#+END_SRC

** async
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

** icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t
    :init)

  (use-package all-the-icons-dired
    :ensure t
    :init (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package all-the-icons-ibuffer
    :ensure t
    :init (all-the-icons-ibuffer-mode 1))
#+END_SRC

** dired-hidden-files
#+BEGIN_SRC emacs-lisp
  (use-package dired-hide-dotfiles
    :ensure t
    :config
    (define-key dired-mode-map "." #'dired-hide-dotfiles-mode)
    (add-hook 'dired-mode-hook  #'dired-hide-dotfiles-mode))
#+END_SRC

** shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

** auto-indent
#+BEGIN_SRC emacs-lisp
  (use-package auto-indent-mode
    :ensure t
    :init (auto-indent-global-mode ))
#+END_SRC

** whitespace-cleanup
#+BEGIN_SRC emacs-lisp
  (use-package whitespace-cleanup-mode
    :ensure t
    :init 
    (add-hook 'js2-mode-hook 'whitespace-cleanup-mode)
    (add-hook 'clojure-mode-hook 'whitespace-cleanup-mode))
#+END_SRC

** buffer-move
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :config
    (global-set-key (kbd "C-x <up>")     'buf-move-up)
    (global-set-key (kbd "C-x <down>")   'buf-move-down)
    (global-set-key (kbd "C-x <left>")   'buf-move-left)
    (global-set-key (kbd "C-x <right>")  'buf-move-right))
#+END_SRC

** Switch Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-multiple-frames t)
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
          '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC

** vterm
우분투 리눅스기반으로 설명 
사전에 아래 패키지를 미리 설치할 것 
sudo apt install cmake libtool libtool-bin 

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :init
    (global-set-key (kbd "<M-return>") 'vterm))
#+END_SRC

** beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :if window-system
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC

** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))

  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC

** exapnd-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC

** popup-kill-ring
browsing supports C-n and C-p
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

** kill-ring
default is 60
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 100)
#+END_SRC

** hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC

** Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode "\\.yml\\'")
#+END_SRC

** Hydra 
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)

  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out"))
#+END_SRC

** paredit
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :diminish paredit-mode
    :init
    (use-package paredit-everywhere :ensure t)
    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           'enable-paredit-mode))
#+END_SRC


* Git integration
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50)
    :bind
    ("C-x g" . magit-status))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :init
    (use-package git-gutter-fringe :ensure t)
    (setq-default left-fringe-width  20)
    (setq-default right-fringe-width 20)
    (set-face-foreground 'git-gutter-fr:modified "yellow")
    (set-face-foreground 'git-gutter-fr:added    "blue")
    (set-face-foreground 'git-gutter-fr:deleted  "white")
    (setq git-gutter:window-width 2)
    (setq git-gutter:unchanged-sign " ")
    (global-git-gutter-mode +1))
#+END_SRC


* Custom function

#+BEGIN_SRC emacs-lisp
  (defun edit-config ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'edit-config)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c d w") 'kill-whole-word)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
        (point-at-bol)
        (point-at-eol)))))
  (global-set-key (kbd "C-c y y") 'copy-whole-line)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)

  (defun nolinum()
    (interactive)
    (message "Deactivated linum mode")
    (global-linum-mode 0)
    (linum-mode 0))
#+END_SRC



* Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 1)
    (setq company-minimum-prefix-length 3)
    :init
    (company-mode 1))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "SPC") #'company-abort))
#+END_SRC


* Org
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :disabled
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC



* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (setq projectile-enable-caching t
          projectile-indexing-method 'alien
          projectile-completion-system 'helm
          projectile-switch-project-action 'helm-projectile)
    ;; https://github.com/bbatsov/projectile/issues/1183
    (setq projectile-mode-line
          '(:eval (format " Projectile[%s]"
                          (projectile-project-name))))
    (projectile-global-mode))

  (use-package helm-projectile
    :ensure t
    :commands (helm-projectile)
    :after helm
    :config (helm-projectile-on))
#+END_SRC


* Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind (("C-c h" . helm-mini)
           ("C-h a" . helm-apropos)
           ("C-x b" . helm-buffers-list)         
           ("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x f" . helm-find-files)
           ("C-x r f" . helm-recentf)
           ("C-x p g" . helm-projectile-grep)
           ("C-x c o" . helm-occur)
           ("C-x c s" . helm-swoop)
           ("C-x c y" . helm-yas-complete)
           ("C-x c Y" . helm-yas-create-snippet-on-region)         
           ("C-x c SPC" . helm-all-mark-rings)
           ("C-x c g" . helm-grep-do-git-grep)
           )
    :init
    (require 'helm-config)
    (setq helm-split-window-inside-p t)
    (setq helm-candidate-number-limit 100)
    (setq helm-yas-display-key-on-candidate t)
    (setq helm-idle-delay 0.0
          helm-input-idle-delay 0.01                                  
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)`
    :config
    (use-package helm-descbinds
      :ensure t
      :config (helm-descbinds-mode)))

  (use-package helm-swoop
    :ensure t)

  (use-package helm-ag
    :ensure t)

  (use-package helm-projectile
    :ensure t)

  (use-package helm-xref
    :ensure t)

#+END_SRC


* Web Mode

** prettier-js
#+BEGIN_SRC emacs-lisp
  (use-package prettier-js
    :ensure t
    :config
    (setq prettier-js-args '(
                             "--single-quote"
                             "--jsx-single-quote" "true"
                             "--bracket-spacing" "false"
                             ))
    )
#+END_SRC

** js2-mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode
    ("\\.js\\'"
     "\\.vue\\'")
    :config
    (setq-default js-indent-level 2
                  js2-strict-missing-semi-warning nil
                  js2-highlight-external-variables nil
                  js2-ignored-warnings '("msg.extra.trailing.comma"))
    (add-hook 'js2-mode-hook 'prettier-js-mode))
#+END_SRC
** typescript-mode
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :ensure t
    :mode "\\.tsx?\\'"
    :config
    (add-hook 'typescript-mode-hook 'lsp))
#+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode
    ("\\.hbs\\'"
     "\\.mustache\\'"
     "\\.html?\\'"
     "\\.php\\'"
     "\\.vue\\'")
    :config
    (setq web-mode-enable-auto-pairing t
          web-mode-enable-auto-closing t
          web-mode-enable-current-element-highlight t
          web-mode-enable-current-column-highlight nil
          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-attr-indent-offset 2
          css-indent-offset 2)
    (add-hook 'web-mode-hook 'prettier-js-mode))
#+END_SRC
** emmet-mode
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :defer t
    :config
    (define-key emmet-mode-keymap (kbd "C-j") nil)
    (keyboard-translate ?\C-i ?\H-i)
    (define-key emmet-mode-keymap (kbd "H-i") 'emmet-expand-line)
    (setq
     emmet-self-closing-tag-style " /"
     emmet-preview-default 1
     emmet-indent-after-insert t
     emmet-indentation 2)
    :hook
    ((web-mode . emmet-mode)
     (sgml-mode . emmet-mode)
     (css-mode . emmet-mode)))
#+END_SRC
** jsx-mode
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :mode
    ("\\.jsx?\\'"))
#+END_SRC


* Clojure
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t
    :config
    (use-package flycheck-clojure
      :ensure t
      :after flycheck
      :commands flycheck-clojure-setup
      :init
      (add-hook 'flycheck-mode-hook #'flycheck-clojure-setup))
    (add-hook 'clojure-mode-hook
              (lambda ()
                (setq clojure-indent-style :always-align)
                (define-clojure-indent
                  (defroutes 'defun)
                  (GET 2)
                  (POST 2)
                  (PUT 2)
                  (DELETE 2)
                  (PATCH 2)
                  (HEAD 2)
                  (ANY 2)
                  (context 2))
                (rainbow-delimiters-mode t)
                (paredit-mode t)
                (subword-mode t))))

  (use-package cider
    :ensure t
    :commands (cider cider-connect cider-jack-in)
    :config
    (add-hook 'cider-mode-hook 'eldoc-mode)
    (add-hook 'cider-repl-mode-hook (lambda ()
              (setq cider-repl-history-file "~/.emacs.d/cider-history")
              (turn-on-eldoc-mode)
              (paredit-mode t)
              (subword-mode t))))
#+END_SRC


* LSP
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)

  (use-package lsp-mode 
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l"
          lsp-completion-show-detail nil 
          lsp-completion-show-kind nil)
    :config
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (yas-global-mode))

  (use-package lsp-ui
    :ensure t)

  (use-package yasnippet
    :ensure t)

  (use-package lsp-treemacs
      :ensure t)

  (use-package helm-lsp
    :ensure t
    :config
    ;; (add-hook 'prog-mode-hook  'lsp)
    (add-hook 'js2-mode-hook  'lsp)
    ;; buffer list에서 버퍼이름이 편집상태가 되서 일단 코멘트처리
    ;;(define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol)
    )

  (with-eval-after-load 'js
    (define-key js-mode-map (kbd "M-.") nil))
#+END_SRC


* Go
gopls가 설치되어야 한다
#+BEGIN_SRC emacs-lisp
  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))

  (use-package go-mode
    :ensure t
    :config
    (add-hook 'go-mode-hook #'lsp-deferred)
    (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
    (add-hook 'go-mode-hook #'yas-minor-mode)
    )
#+END_SRC


* Add Hook
org, dired에서는 라인넘버를 보여주지 않는다
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook  'nolinum)
  (add-hook 'dired-mode-hook  'nolinum)
  (add-hook 'prog-mode-hook  'linum-mode)
#+END_SRC
